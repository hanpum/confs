# zsh auto-complete function for program using gflags as arugment parser
# 
# USAGE:
# 1. add direct of current script to fpath, e.g
#    fpath+=${directory/that/contain/this/script}
#
# 2. autoload function
#    autoload -U _gflag
#
# 3. set auto-complete for command, e.g fst* in openfst
#    compdef _gflag -P "fst*"
#
# 4. [optional] enable description 
#    zstyle ":completion:*:*:fst*:*:descriptions" format "%d"


# parse auto-complte information for --help output
# 
# ARGUMNETS
# - $@: command that generate help documents, e.g fstprint --help 
#
# OUTPUTS:
# - information used to build auto complete
function parse_help() {
    eval "$@" | awk '
    function disp() {
        old = OFS
        OFS = "###"
        if (length(optName)>0) {
            if (isSwitch) {
                printf("%s[%s, default %s]\n", optName, optDesc, optDefVal)
                if (optName !~ /^--help/) {
                    negName = optName
                    sub(/--/, "--no", negName)
                    printf("%s[%s, default %s]\n", negName, optDesc, optDefVal)
                }
            } else {
                printf("%s=[%s]:%s, default %s\n", optName, optDesc, optDesc, optDefVal)
            }
        }
        OFS = old
    }

    # strip space
    {
        gsub(/^[ \t]*/, "")
        gsub(/[ \t]*$/, "")
    }

    # parse argument from usge line
    /^Usage:/ {
        n = split($0, arr)
        isOpt = false
        for(i=3; i<=n; ++i) {
            val = arr[i]
            isOpt = (val~/\[/)

            gsub(/[\[\]]/, "", val)

            # is required argument?
            if (isOpt) {
                required = "::"
            } else {
                required = ":"
            }

            # is a file name?
            nameLen = split(val, fnameList, ".")
            if (nameLen>1) {
                action = sprintf("_files -g \\*.%s", fnameList[nameLen])
                desc = val
                gsub(/\./, " ", desc)
                desc = sprintf("%s file", desc)
            } else {
                action = ""
                desc = val
            }

            printf("%d%s%s:%s\n", i-2, required, desc, action)
        }
        next
    }

    # option line
    /^-/{
        split($0, flds, ":")
        name = flds[1]

        if (name!=optName) {
            disp()
            optDesc = ""
        }

        optName = name

        # is a switch
        isSwitch = ($0 ~ /type = bool/)

        gsub(/^[^:]*:[ \t]*/, "")
        gsub(/type = (std::string|bool), */, "")

        gsub(/default = /, "")
        optDefVal = $0
        next
    }

    # empty line
    /^$/ {
        optName = ""
        optDesc = ""
        next
    }

    # description line 
    {
        optDesc = sprintf("%s%s", optDesc, $0)
    }

    # process last value
    END {
        disp()
    }'
}


function _gflag() {
    local valList=()
    local data=$(parse_help "${words[1]} --help")
    for line in ${(f)data}; do 
        valList+=${line}
    done
    _arguments ${valList}
}

# Local Variables:
# mode: Shell-Script
# sh-indentation: 4
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
# vim: ft=zsh sw=4 ts=4 expandtab
